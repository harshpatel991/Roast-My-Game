packages:
    yum:
        mod_ssl : []

commands:
    01_gdal:
        command: "yum --enablerepo=epel -y install gdal"

files:
  /root/.getssl/getssl.cfg:
    mode: "000644"
    owner: root
    group: root
    content: |
      # vim: filetype=sh
      #
      # This file is read first and is common to all domains
      #
      # Uncomment and modify any variables you need
      # see https://github.com/srvrco/getssl/wiki/Config-variables for details
      #
      # The staging server is best for testing (hence set as default)
      #CA="https://acme-staging-v02.api.letsencrypt.org"
      # This server issues full certificates, however has rate limits
      #CA="https://acme-v02.api.letsencrypt.org"

      # The agreement that must be signed with the CA, if not defined the default agreement will be used
      #AGREEMENT=""

      # Set an email address associated with your account - generally set at account level rather than domain.
      ACCOUNT_EMAIL="ipod998@gmail.com"
      ACCOUNT_KEY_LENGTH=4096
      ACCOUNT_KEY="/home/ec2-user/.getssl/account.key"

      # Account key and private key types - can be rsa, prime256v1, secp384r1 or secp521r1
      #ACCOUNT_KEY_TYPE="rsa"
      PRIVATE_KEY_ALG="rsa"
      #REUSE_PRIVATE_KEY="true"

      # Preferred Chain - use an different certificate root from the default
      # This uses wildcard matching so requesting "X1" returns the correct certificate - may need to escape characters
      # Staging options are: "(STAGING) Doctored Durian Root CA X3" and "(STAGING) Pretend Pear X1"
      # Production options are: "ISRG Root X1" and "ISRG Root X2"
      #PREFERRED_CHAIN="\(STAGING\) Pretend Pear X1"

      # Uncomment this if you need the full chain file to include the root certificate (Java keystores, Nutanix Prism)
      #FULL_CHAIN_INCLUDE_ROOT="true"

      # The command needed to reload apache / nginx or whatever you use.
      # Several (ssh) commands may be given using a bash array:
      # RELOAD_CMD=('ssh:sshuserid@server5:systemctl reload httpd' 'logger getssl for server5 efficient.')
      RELOAD_CMD="sudo service httpd restart"

      # The time period within which you want to allow renewal of a certificate
      #  this prevents hitting some of the rate limits.
      # Creating a file called FORCE_RENEWAL in the domain directory allows one-off overrides
      # of this setting
      RENEW_ALLOW="30"

      # Define the server type. This can be https, ftp, ftpi, imap, imaps, pop3, pop3s, smtp,
      # smtps_deprecated, smtps, smtp_submission, xmpp, xmpps, ldaps or a port number which
      # will be checked for certificate expiry and also will be checked after
      # an update to confirm correct certificate is running (if CHECK_REMOTE) is set to true
      SERVER_TYPE="https"
      CHECK_REMOTE="true"

      # Use the following 3 variables if you want to validate via DNS
      #VALIDATE_VIA_DNS="true"
      #DNS_ADD_COMMAND=
      #DNS_DEL_COMMAND=

  /root/.getssl/roastmygame.com/getssl.cfg:
    mode: "000644"
    owner: root
    group: root
    content: |
      # vim: filetype=sh
      #
      # This file is read second (and per domain if running with the -a option)
      # and overwrites any settings from the first file
      #
      # Uncomment and modify any variables you need
      # see https://github.com/srvrco/getssl/wiki/Config-variables for details
      # see https://github.com/srvrco/getssl/wiki/Example-config-files for example configs
      #
      # The staging server is best for testing
      #CA="https://acme-staging-v02.api.letsencrypt.org"
      # This server issues full certificates, however has rate limits
      CA="https://acme-v02.api.letsencrypt.org"

      # Private key types - can be rsa, prime256v1, secp384r1 or secp521r1
      #PRIVATE_KEY_ALG="rsa"

      # Additional domains - this could be multiple domains / subdomains in a comma separated list
      # Note: this is Additional domains - so should not include the primary domain.
      SANS="www.roastmygame.com"

      # Acme Challenge Location. The first line for the domain, the following ones for each additional domain.
      # If these start with ssh: then the next variable is assumed to be the hostname and the rest the location.
      # An ssh key will be needed to provide you with access to the remote server.
      # Optionally, you can specify a different userid for ssh/scp to use on the remote server before the @ sign.
      # If left blank, the username on the local server will be used to authenticate against the remote server.
      # If these start with ftp:/ftpes: then the next variables are ftpuserid:ftppassword:servername:ACL_location
      # These should be of the form "/path/to/your/website/folder/.well-known/acme-challenge"
      # where "/path/to/your/website/folder/" is the path, on your web server, to the web root for your domain.
      # You can also user WebDAV over HTTPS as transport mechanism. To do so, start with davs: followed by username,
      # password, host, port (explicitly needed even if using default port 443) and path on the server.
              # Multiple locations can be defined for a file by separating the locations with a semi-colon.
      ACL=('/var/www/html/public/.well-known/acme-challenge')

      # Specify SSH options, e.g. non standard port in SSH_OPTS
      # (Can also use SCP_OPTS and SFTP_OPTS)
      # SSH_OPTS=-p 12345

      # Set USE_SINGLE_ACL="true" to use a single ACL for all checks
      USE_SINGLE_ACL="true"

      # Preferred Chain - use an different certificate root from the default
      # This uses wildcard matching so requesting "X1" returns the correct certificate - may need to escape characters
      # Staging options are: "(STAGING) Doctored Durian Root CA X3" and "(STAGING) Pretend Pear X1"
      # Production options are: "ISRG Root X1" and "ISRG Root X2"
      #PREFERRED_CHAIN="\(STAGING\) Pretend Pear X1"

      # Uncomment this if you need the full chain file to include the root certificate (Java keystores, Nutanix Prism)
      #FULL_CHAIN_INCLUDE_ROOT="true"

      # Location for all your certs, these can either be on the server (full path name)
      # or using ssh /sftp as for the ACL
      #DOMAIN_CERT_LOCATION="/etc/ssl/roastmygame.com.crt" # this is domain cert
      #DOMAIN_KEY_LOCATION="/etc/ssl/roastmygame.com.key" # this is domain key
      #CA_CERT_LOCATION="/etc/ssl/chain.crt" # this is CA cert
      #DOMAIN_CHAIN_LOCATION="" # this is the domain cert and CA cert
      #DOMAIN_PEM_LOCATION="" # this is the domain key, domain cert and CA cert

      # The command needed to reload apache / nginx or whatever you use.
      # Several (ssh) commands may be given using a bash array:
      # RELOAD_CMD=('ssh:sshuserid@server5:systemctl reload httpd' 'logger getssl for server5 efficient.')
      #RELOAD_CMD=""

      # Uncomment the following line to prevent non-interactive renewals of certificates
      #PREVENT_NON_INTERACTIVE_RENEWAL="true"

      # Define the server type. This can be https, ftp, ftpi, imap, imaps, pop3, pop3s, smtp,
      # smtps_deprecated, smtps, smtp_submission, xmpp, xmpps, ldaps or a port number which
      # will be checked for certificate expiry and also will be checked after
      # an update to confirm correct certificate is running (if CHECK_REMOTE) is set to true
      #SERVER_TYPE="https"
      #CHECK_REMOTE="true"
      #CHECK_REMOTE_WAIT="2" # wait 2 seconds before checking the remote server
  /etc/httpd/conf.d/http.conf:
    mode: "000644"
    owner: root
    group: root
    content: |
      #this file is so that the certbot doesn't complain about not having a virtual host on port 80
      <VirtualHost *:80>
        ServerAdmin webmaster@localhost
        DocumentRoot /var/www/html/public
      </VirtualHost>
  /etc/httpd/conf.d/ssl.conf:
    mode: "000644"
    owner: root
    group: root
    content: |
      Listen 443 https
      SSLPassPhraseDialog exec:/usr/libexec/httpd-ssl-pass-dialog
      SSLSessionCache         shmcb:/run/httpd/sslcache(512000)
      SSLSessionCacheTimeout  300

      SSLRandomSeed startup file:/dev/urandom  256
      SSLRandomSeed connect builtin

      SSLCryptoDevice builtin

      <VirtualHost _default_:443>
        ErrorLog logs/ssl_error_log
        TransferLog logs/ssl_access_log
        LogLevel warn

        SSLEngine on

        SSLCertificateFile    "/root/.getssl/roastmygame.com/fullchain.crt"
        SSLCertificateKeyFile "/root/.getssl/roastmygame.com/roastmygame.com.key"

        SSLCipherSuite ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:AES:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA
        SSLProxyCipherSuite ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:AES:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA
        SSLHonorCipherOrder   On

        SSLProtocol -SSLv2 -SSLv3 -TLSv1 -TLSv1.1 +TLSv1.2
        SSLProxyProtocol -SSLv2 -SSLv3 -TLSv1 -TLSv1.1 +TLSv1.2

        <Files ~ "\.(cgi|shtml|phtml|php3?)$">
            SSLOptions +StdEnvVars
        </Files>
        <Directory "/var/www/cgi-bin">
            SSLOptions +StdEnvVars
        </Directory>

        BrowserMatch "MSIE [2-5]" \
                 nokeepalive ssl-unclean-shutdown \
                 downgrade-1.0 force-response-1.0

        CustomLog logs/ssl_request_log \
                 "%t %h %{SSL_PROTOCOL}x %{SSL_CIPHER}x \"%r\" %b"

        # these will be filled in by 20_add_server_name and 30_add_server_alias below
        ServerName roastmygame.com
        ServerAlias www.roastmygame.com
      </VirtualHost>
  /opt/setup-ssl.sh:
    mode: "000777"
    owner: root
    group: root
    content: |
      #!/bin/bash
      set -x

      source /opt/elasticbeanstalk/support/envvars

      echo "============ START SETUP SSL ============";

      #install getssl
      sudo mkdir /opt/getssl || true;
      cd /opt/getssl;
      curl --silent https://raw.githubusercontent.com/srvrco/getssl/master/getssl > getssl ;
      chmod 700 getssl;

      sudo sed /etc/httpd/conf.d/ssl.conf -e "s;ServerName.*;ServerName ${SERVER_DOMAIN};" -i;
      sudo sed /etc/httpd/conf.d/ssl.conf -e "s;ServerAlias.*;ServerAlias ${SERVER_ALIAS};" -i;

      if $SHOULD_DOWNLOAD_CERT_FROM_S3; then
        #this will download the cert and configuration from S3
        aws s3 cp "s3://roastmygame-private/${CERT_ENV}/getssl-backup.zip" "/root/.getssl/";
        unzip -o /root/.getssl/getssl-backup.zip -d '/root/'

        echo "Completed downloading cert from S3";

        ls "/root/.getssl/"
        ls "/root/.getssl/${SERVER_DOMAIN}/";
      else
        echo "Downloading cert from S3 is disabled"
      fi

      if $SHOULD_GENERATE_CERT; then
        echo "Generating new cert"
        sudo /opt/update-ssl.sh
      else
        echo "Generating new cert disabled";
      fi

      if $SHOULD_CRON_REFRESH_CERT; then
        echo "Creating cron to refresh cert"
        echo -e '30 2,14 * * * root /opt/update-ssl.sh >> /var/log/update-ssl-cron.log 2>&1\n' > /etc/cron.d/certificate_renew
        chmod 644 /etc/cron.d/certificate_renew
      else
        echo "Refresh cert cron is disabled"
      fi

      sudo service httpd restart

      echo "============ END SETUP SSL ============";
  /opt/update-ssl.sh:
    mode: "000777"
    owner: root
    group: root
    content: |
      #!/bin/bash
      set -x;

      source /opt/elasticbeanstalk/support/envvars

      sudo /opt/getssl/getssl ${SERVER_DOMAIN}

      cd /root/;
      sudo zip --symlinks -FS -r /etc/getssl-backup.zip .getssl

      echo "Uploading updated cert to S3";
      #aws s3 cp /etc/getssl-backup.zip "s3://roastmygame-security-private/${CERT_ENV}/";
      echo "Completed uploading updated cert to S3";

container_commands:
    00_run_setup_ssl:
        command: "sudo /opt/setup-ssl.sh"
